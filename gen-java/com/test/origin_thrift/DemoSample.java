/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.test.origin_thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2025-06-26")
public class DemoSample implements org.apache.thrift.TBase<DemoSample, DemoSample._Fields>, java.io.Serializable, Cloneable, Comparable<DemoSample> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DemoSample");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MS_FIELD_DESC = new org.apache.thrift.protocol.TField("ms", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DemoSampleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DemoSampleTupleSchemeFactory();

  public int userId; // required
  public long ms; // required
  public java.lang.String sessionId; // required
  public java.lang.String label; // required
  public java.util.Map<java.lang.Integer,java.lang.String> features; // required
  public java.util.List<java.lang.Integer> codes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    MS((short)2, "ms"),
    SESSION_ID((short)3, "sessionId"),
    LABEL((short)4, "label"),
    FEATURES((short)5, "features"),
    CODES((short)6, "codes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // MS
          return MS;
        case 3: // SESSION_ID
          return SESSION_ID;
        case 4: // LABEL
          return LABEL;
        case 5: // FEATURES
          return FEATURES;
        case 6: // CODES
          return CODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __MS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MS, new org.apache.thrift.meta_data.FieldMetaData("ms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DemoSample.class, metaDataMap);
  }

  public DemoSample() {
  }

  public DemoSample(
    int userId,
    long ms,
    java.lang.String sessionId,
    java.lang.String label,
    java.util.Map<java.lang.Integer,java.lang.String> features,
    java.util.List<java.lang.Integer> codes)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.ms = ms;
    setMsIsSet(true);
    this.sessionId = sessionId;
    this.label = label;
    this.features = features;
    this.codes = codes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DemoSample(DemoSample other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.ms = other.ms;
    if (other.isSetSessionId()) {
      this.sessionId = other.sessionId;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetFeatures()) {
      java.util.Map<java.lang.Integer,java.lang.String> __this__features = new java.util.HashMap<java.lang.Integer,java.lang.String>(other.features);
      this.features = __this__features;
    }
    if (other.isSetCodes()) {
      java.util.List<java.lang.Integer> __this__codes = new java.util.ArrayList<java.lang.Integer>(other.codes);
      this.codes = __this__codes;
    }
  }

  public DemoSample deepCopy() {
    return new DemoSample(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setMsIsSet(false);
    this.ms = 0;
    this.sessionId = null;
    this.label = null;
    this.features = null;
    this.codes = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public DemoSample setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getMs() {
    return this.ms;
  }

  public DemoSample setMs(long ms) {
    this.ms = ms;
    setMsIsSet(true);
    return this;
  }

  public void unsetMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MS_ISSET_ID);
  }

  /** Returns true if field ms is set (has been assigned a value) and false otherwise */
  public boolean isSetMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MS_ISSET_ID);
  }

  public void setMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MS_ISSET_ID, value);
  }

  public java.lang.String getSessionId() {
    return this.sessionId;
  }

  public DemoSample setSessionId(java.lang.String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  public void unsetSessionId() {
    this.sessionId = null;
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return this.sessionId != null;
  }

  public void setSessionIdIsSet(boolean value) {
    if (!value) {
      this.sessionId = null;
    }
  }

  public java.lang.String getLabel() {
    return this.label;
  }

  public DemoSample setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public int getFeaturesSize() {
    return (this.features == null) ? 0 : this.features.size();
  }

  public void putToFeatures(int key, java.lang.String val) {
    if (this.features == null) {
      this.features = new java.util.HashMap<java.lang.Integer,java.lang.String>();
    }
    this.features.put(key, val);
  }

  public java.util.Map<java.lang.Integer,java.lang.String> getFeatures() {
    return this.features;
  }

  public DemoSample setFeatures(java.util.Map<java.lang.Integer,java.lang.String> features) {
    this.features = features;
    return this;
  }

  public void unsetFeatures() {
    this.features = null;
  }

  /** Returns true if field features is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatures() {
    return this.features != null;
  }

  public void setFeaturesIsSet(boolean value) {
    if (!value) {
      this.features = null;
    }
  }

  public int getCodesSize() {
    return (this.codes == null) ? 0 : this.codes.size();
  }

  public java.util.Iterator<java.lang.Integer> getCodesIterator() {
    return (this.codes == null) ? null : this.codes.iterator();
  }

  public void addToCodes(int elem) {
    if (this.codes == null) {
      this.codes = new java.util.ArrayList<java.lang.Integer>();
    }
    this.codes.add(elem);
  }

  public java.util.List<java.lang.Integer> getCodes() {
    return this.codes;
  }

  public DemoSample setCodes(java.util.List<java.lang.Integer> codes) {
    this.codes = codes;
    return this;
  }

  public void unsetCodes() {
    this.codes = null;
  }

  /** Returns true if field codes is set (has been assigned a value) and false otherwise */
  public boolean isSetCodes() {
    return this.codes != null;
  }

  public void setCodesIsSet(boolean value) {
    if (!value) {
      this.codes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.Integer)value);
      }
      break;

    case MS:
      if (value == null) {
        unsetMs();
      } else {
        setMs((java.lang.Long)value);
      }
      break;

    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case FEATURES:
      if (value == null) {
        unsetFeatures();
      } else {
        setFeatures((java.util.Map<java.lang.Integer,java.lang.String>)value);
      }
      break;

    case CODES:
      if (value == null) {
        unsetCodes();
      } else {
        setCodes((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case MS:
      return getMs();

    case SESSION_ID:
      return getSessionId();

    case LABEL:
      return getLabel();

    case FEATURES:
      return getFeatures();

    case CODES:
      return getCodes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case MS:
      return isSetMs();
    case SESSION_ID:
      return isSetSessionId();
    case LABEL:
      return isSetLabel();
    case FEATURES:
      return isSetFeatures();
    case CODES:
      return isSetCodes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DemoSample)
      return this.equals((DemoSample)that);
    return false;
  }

  public boolean equals(DemoSample that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_ms = true;
    boolean that_present_ms = true;
    if (this_present_ms || that_present_ms) {
      if (!(this_present_ms && that_present_ms))
        return false;
      if (this.ms != that.ms)
        return false;
    }

    boolean this_present_sessionId = true && this.isSetSessionId();
    boolean that_present_sessionId = true && that.isSetSessionId();
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (!this.sessionId.equals(that.sessionId))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_features = true && this.isSetFeatures();
    boolean that_present_features = true && that.isSetFeatures();
    if (this_present_features || that_present_features) {
      if (!(this_present_features && that_present_features))
        return false;
      if (!this.features.equals(that.features))
        return false;
    }

    boolean this_present_codes = true && this.isSetCodes();
    boolean that_present_codes = true && that.isSetCodes();
    if (this_present_codes || that_present_codes) {
      if (!(this_present_codes && that_present_codes))
        return false;
      if (!this.codes.equals(that.codes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + userId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ms);

    hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
    if (isSetSessionId())
      hashCode = hashCode * 8191 + sessionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetFeatures()) ? 131071 : 524287);
    if (isSetFeatures())
      hashCode = hashCode * 8191 + features.hashCode();

    hashCode = hashCode * 8191 + ((isSetCodes()) ? 131071 : 524287);
    if (isSetCodes())
      hashCode = hashCode * 8191 + codes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DemoSample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMs()).compareTo(other.isSetMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ms, other.ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCodes()).compareTo(other.isSetCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, other.codes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DemoSample(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ms:");
    sb.append(this.ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionId:");
    if (this.sessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("features:");
    if (this.features == null) {
      sb.append("null");
    } else {
      sb.append(this.features);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("codes:");
    if (this.codes == null) {
      sb.append("null");
    } else {
      sb.append(this.codes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DemoSampleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DemoSampleStandardScheme getScheme() {
      return new DemoSampleStandardScheme();
    }
  }

  private static class DemoSampleStandardScheme extends org.apache.thrift.scheme.StandardScheme<DemoSample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DemoSample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ms = iprot.readI64();
              struct.setMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionId = iprot.readString();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.features = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map0.size);
                int _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readString();
                  struct.features.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.codes = new java.util.ArrayList<java.lang.Integer>(_list4.size);
                int _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readI32();
                  struct.codes.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DemoSample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MS_FIELD_DESC);
      oprot.writeI64(struct.ms);
      oprot.writeFieldEnd();
      if (struct.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.sessionId);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.features != null) {
        oprot.writeFieldBegin(FEATURES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.features.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter7 : struct.features.entrySet())
          {
            oprot.writeI32(_iter7.getKey());
            oprot.writeString(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.codes != null) {
        oprot.writeFieldBegin(CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.codes.size()));
          for (int _iter8 : struct.codes)
          {
            oprot.writeI32(_iter8);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DemoSampleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DemoSampleTupleScheme getScheme() {
      return new DemoSampleTupleScheme();
    }
  }

  private static class DemoSampleTupleScheme extends org.apache.thrift.scheme.TupleScheme<DemoSample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DemoSample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetMs()) {
        optionals.set(1);
      }
      if (struct.isSetSessionId()) {
        optionals.set(2);
      }
      if (struct.isSetLabel()) {
        optionals.set(3);
      }
      if (struct.isSetFeatures()) {
        optionals.set(4);
      }
      if (struct.isSetCodes()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetMs()) {
        oprot.writeI64(struct.ms);
      }
      if (struct.isSetSessionId()) {
        oprot.writeString(struct.sessionId);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetFeatures()) {
        {
          oprot.writeI32(struct.features.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter9 : struct.features.entrySet())
          {
            oprot.writeI32(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
        }
      }
      if (struct.isSetCodes()) {
        {
          oprot.writeI32(struct.codes.size());
          for (int _iter10 : struct.codes)
          {
            oprot.writeI32(_iter10);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DemoSample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ms = iprot.readI64();
        struct.setMsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sessionId = iprot.readString();
        struct.setSessionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.features = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map11.size);
          int _key12;
          java.lang.String _val13;
          for (int _i14 = 0; _i14 < _map11.size; ++_i14)
          {
            _key12 = iprot.readI32();
            _val13 = iprot.readString();
            struct.features.put(_key12, _val13);
          }
        }
        struct.setFeaturesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.codes = new java.util.ArrayList<java.lang.Integer>(_list15.size);
          int _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI32();
            struct.codes.add(_elem16);
          }
        }
        struct.setCodesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

